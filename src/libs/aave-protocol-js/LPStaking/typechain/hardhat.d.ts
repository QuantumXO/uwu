/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from 'ethers';
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from '@nomiclabs/hardhat-ethers/types';

import * as Contracts from '.';

declare module 'hardhat/types/runtime' {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: 'Ownable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: 'ERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: 'IERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: 'IStargateFeeLibrary',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStargateFeeLibrary__factory>;
    getContractFactory(
      name: 'ILayerZeroEndpoint',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroEndpoint__factory>;
    getContractFactory(
      name: 'ILayerZeroReceiver',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroReceiver__factory>;
    getContractFactory(
      name: 'ILayerZeroUserApplicationConfig',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroUserApplicationConfig__factory>;
    getContractFactory(
      name: 'LPStaking',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPStaking__factory>;
    getContractFactory(
      name: 'LPTokenERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPTokenERC20__factory>;
    getContractFactory(
      name: 'OmnichainFungibleToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OmnichainFungibleToken__factory>;
    getContractFactory(
      name: 'Pool',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pool__factory>;
    getContractFactory(
      name: 'StargateToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StargateToken__factory>;

    getContractAt(
      name: 'Ownable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(name: 'ERC20', address: string, signer?: ethers.Signer): Promise<Contracts.ERC20>;
    getContractAt(
      name: 'IERC20',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: 'IStargateFeeLibrary',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStargateFeeLibrary>;
    getContractAt(
      name: 'ILayerZeroEndpoint',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroEndpoint>;
    getContractAt(
      name: 'ILayerZeroReceiver',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroReceiver>;
    getContractAt(
      name: 'ILayerZeroUserApplicationConfig',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroUserApplicationConfig>;
    getContractAt(
      name: 'LPStaking',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LPStaking>;
    getContractAt(
      name: 'LPTokenERC20',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LPTokenERC20>;
    getContractAt(
      name: 'OmnichainFungibleToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OmnichainFungibleToken>;
    getContractAt(name: 'Pool', address: string, signer?: ethers.Signer): Promise<Contracts.Pool>;
    getContractAt(
      name: 'StargateToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StargateToken>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
