/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export interface IStrgtPoolInterface extends utils.Interface {
  functions: {
    'BP_DENOMINATOR()': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'convertRate()': FunctionFragment;
    'decimals()': FunctionFragment;
    'deltaCredit()': FunctionFragment;
    'localDecimals()': FunctionFragment;
    'mintFeeBP()': FunctionFragment;
    'poolId()': FunctionFragment;
    'token()': FunctionFragment;
    'totalLiquidity()': FunctionFragment;
    'totalSupply()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BP_DENOMINATOR'
      | 'approve'
      | 'balanceOf'
      | 'convertRate'
      | 'decimals'
      | 'deltaCredit'
      | 'localDecimals'
      | 'mintFeeBP'
      | 'poolId'
      | 'token'
      | 'totalLiquidity'
      | 'totalSupply'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BP_DENOMINATOR', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'convertRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deltaCredit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'localDecimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mintFeeBP', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalLiquidity', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'BP_DENOMINATOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convertRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deltaCredit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'localDecimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintFeeBP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;

  events: {};
}

export interface IStrgtPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStrgtPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BP_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    convertRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    deltaCredit(overrides?: CallOverrides): Promise<[BigNumber]>;

    localDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintFeeBP(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolId(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  BP_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  convertRate(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<BigNumber>;

  deltaCredit(overrides?: CallOverrides): Promise<BigNumber>;

  localDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  mintFeeBP(overrides?: CallOverrides): Promise<BigNumber>;

  poolId(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  totalLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    BP_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    convertRate(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    deltaCredit(overrides?: CallOverrides): Promise<BigNumber>;

    localDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    mintFeeBP(overrides?: CallOverrides): Promise<BigNumber>;

    poolId(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    totalLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    BP_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    convertRate(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    deltaCredit(overrides?: CallOverrides): Promise<BigNumber>;

    localDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    mintFeeBP(overrides?: CallOverrides): Promise<BigNumber>;

    poolId(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BP_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deltaCredit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    localDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintFeeBP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLiquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
