/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../common';

export interface YoSifuStargateVaultWrapperInterface extends utils.Interface {
  functions: {
    'SGETH()': FunctionFragment;
    'approveToVault(address[])': FunctionFragment;
    'depositToVault(address,uint256,uint256,address)': FunctionFragment;
    'depositUnderlyingToVault(address,uint256,uint256,address)': FunctionFragment;
    'owner()': FunctionFragment;
    'previewDeposit(address,uint256)': FunctionFragment;
    'previewDepositUnderlyingToVault(address,uint256)': FunctionFragment;
    'previewWithdraw(address,uint256)': FunctionFragment;
    'previewWithdrawUnderlyingFromVault(address,uint256)': FunctionFragment;
    'setOwner(address)': FunctionFragment;
    'strgtRouter()': FunctionFragment;
    'withdrawFromVault(address,uint256,uint256,address)': FunctionFragment;
    'withdrawUnderlyingFromVault(address,uint256,uint256,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'SGETH'
      | 'approveToVault'
      | 'depositToVault'
      | 'depositUnderlyingToVault'
      | 'owner'
      | 'previewDeposit'
      | 'previewDepositUnderlyingToVault'
      | 'previewWithdraw'
      | 'previewWithdrawUnderlyingFromVault'
      | 'setOwner'
      | 'strgtRouter'
      | 'withdrawFromVault'
      | 'withdrawUnderlyingFromVault'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'SGETH', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'approveToVault',
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'depositToVault',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'depositUnderlyingToVault',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'previewDeposit',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewDepositUnderlyingToVault',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewWithdraw',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewWithdrawUnderlyingFromVault',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'setOwner', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'strgtRouter', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'withdrawFromVault',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawUnderlyingFromVault',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(functionFragment: 'SGETH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approveToVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositToVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositUnderlyingToVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewDeposit', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'previewDepositUnderlyingToVault',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'previewWithdraw', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'previewWithdrawUnderlyingFromVault',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'setOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strgtRouter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawFromVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawUnderlyingFromVault', data: BytesLike): Result;

  events: {
    'OwnerUpdated(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'OwnerUpdated'): EventFragment;
}

export interface OwnerUpdatedEventObject {
  user: string;
  newOwner: string;
}
export type OwnerUpdatedEvent = TypedEvent<[string, string], OwnerUpdatedEventObject>;

export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;

export interface YoSifuStargateVaultWrapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: YoSifuStargateVaultWrapperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    SGETH(overrides?: CallOverrides): Promise<[string]>;

    approveToVault(
      vaults: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositToVault(
      vault: PromiseOrValue<string>,
      minOut: PromiseOrValue<BigNumberish>,
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositUnderlyingToVault(
      vault: PromiseOrValue<string>,
      minOut: PromiseOrValue<BigNumberish>,
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    previewDeposit(
      vault: PromiseOrValue<string>,
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { shares: BigNumber }>;
    previewDepositUnderlyingToVault(
      vault: PromiseOrValue<string>,
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { sharesVault: BigNumber; sharesPool: BigNumber }>;

    previewWithdraw(
      vault: PromiseOrValue<string>,
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { assetsVault: BigNumber; assetsPool: BigNumber }>;
    previewWithdrawUnderlyingFromVault(
      vault: PromiseOrValue<string>,
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { assetsVault: BigNumber; assetsPool: BigNumber }>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    strgtRouter(overrides?: CallOverrides): Promise<[string]>;

    withdrawFromVault(
      vault: PromiseOrValue<string>,
      minOut: PromiseOrValue<BigNumberish>,
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawUnderlyingFromVault(
      vault: PromiseOrValue<string>,
      minOut: PromiseOrValue<BigNumberish>,
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  SGETH(overrides?: CallOverrides): Promise<string>;

  approveToVault(
    vaults: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositToVault(
    vault: PromiseOrValue<string>,
    minOut: PromiseOrValue<BigNumberish>,
    assets: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositUnderlyingToVault(
    vault: PromiseOrValue<string>,
    minOut: PromiseOrValue<BigNumberish>,
    assets: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  previewDeposit(
    vault: PromiseOrValue<string>,
    assets: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { shares: BigNumber }>;
  previewDepositUnderlyingToVault(
    vault: PromiseOrValue<string>,
    assets: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { sharesVault: BigNumber; sharesPool: BigNumber }>;

  previewWithdraw(
    vault: PromiseOrValue<string>,
    shares: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { assets: BigNumber }>;
  previewWithdrawUnderlyingFromVault(
    vault: PromiseOrValue<string>,
    shares: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { assetsVault: BigNumber; assetsPool: BigNumber }>;

  setOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  strgtRouter(overrides?: CallOverrides): Promise<string>;

  withdrawFromVault(
    vault: PromiseOrValue<string>,
    minOut: PromiseOrValue<BigNumberish>,
    shares: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawUnderlyingFromVault(
    vault: PromiseOrValue<string>,
    minOut: PromiseOrValue<BigNumberish>,
    shares: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    SGETH(overrides?: CallOverrides): Promise<string>;

    approveToVault(vaults: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;

    depositToVault(
      vault: PromiseOrValue<string>,
      minOut: PromiseOrValue<BigNumberish>,
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositUnderlyingToVault(
      vault: PromiseOrValue<string>,
      minOut: PromiseOrValue<BigNumberish>,
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { sharesVault: BigNumber; sharesPool: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<string>;

    previewDeposit(
      vault: PromiseOrValue<string>,
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { shares: BigNumber }>;
    previewDepositUnderlyingToVault(
      vault: PromiseOrValue<string>,
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { sharesVault: BigNumber; sharesPool: BigNumber }>;

    previewWithdraw(
      vault: PromiseOrValue<string>,
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { assetsVault: BigNumber; assetsPool: BigNumber }>;
    previewWithdrawUnderlyingFromVault(
      vault: PromiseOrValue<string>,
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { assetsVault: BigNumber; assetsPool: BigNumber }>;

    setOwner(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    strgtRouter(overrides?: CallOverrides): Promise<string>;

    withdrawFromVault(
      vault: PromiseOrValue<string>,
      minOut: PromiseOrValue<BigNumberish>,
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawUnderlyingFromVault(
      vault: PromiseOrValue<string>,
      minOut: PromiseOrValue<BigNumberish>,
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { assetsVault: BigNumber; assetsPool: BigNumber }>;
  };

  filters: {
    'OwnerUpdated(address,address)'(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnerUpdatedEventFilter;
    OwnerUpdated(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnerUpdatedEventFilter;
  };

  estimateGas: {
    SGETH(overrides?: CallOverrides): Promise<BigNumber>;

    approveToVault(
      vaults: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositToVault(
      vault: PromiseOrValue<string>,
      minOut: PromiseOrValue<BigNumberish>,
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositUnderlyingToVault(
      vault: PromiseOrValue<string>,
      minOut: PromiseOrValue<BigNumberish>,
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    previewDeposit(
      vault: PromiseOrValue<string>,
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
    previewDepositUnderlyingToVault(
      vault: PromiseOrValue<string>,
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      vault: PromiseOrValue<string>,
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
    previewWithdrawUnderlyingFromVault(
      vault: PromiseOrValue<string>,
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    strgtRouter(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFromVault(
      vault: PromiseOrValue<string>,
      minOut: PromiseOrValue<BigNumberish>,
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawUnderlyingFromVault(
      vault: PromiseOrValue<string>,
      minOut: PromiseOrValue<BigNumberish>,
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SGETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approveToVault(
      vaults: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositToVault(
      vault: PromiseOrValue<string>,
      minOut: PromiseOrValue<BigNumberish>,
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositUnderlyingToVault(
      vault: PromiseOrValue<string>,
      minOut: PromiseOrValue<BigNumberish>,
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewDeposit(
      vault: PromiseOrValue<string>,
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
    previewDepositUnderlyingToVault(
      vault: PromiseOrValue<string>,
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewWithdraw(
      vault: PromiseOrValue<string>,
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
    previewWithdrawUnderlyingFromVault(
      vault: PromiseOrValue<string>,
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    strgtRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFromVault(
      vault: PromiseOrValue<string>,
      minOut: PromiseOrValue<BigNumberish>,
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawUnderlyingFromVault(
      vault: PromiseOrValue<string>,
      minOut: PromiseOrValue<BigNumberish>,
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
