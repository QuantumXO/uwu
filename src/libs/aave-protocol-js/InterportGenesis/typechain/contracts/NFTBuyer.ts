/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../../common';

export interface NFTBuyerInterface extends utils.Interface {
  functions: {
    'addCollection(address,uint256[],bool,address,uint256)': FunctionFragment;
    'collectionIndexes(address)': FunctionFragment;
    'collections(uint256)': FunctionFragment;
    'getAllCollectionAddresses()': FunctionFragment;
    'getAllowedCollectionIds(address)': FunctionFragment;
    'getCollectionPriceAndToken(address)': FunctionFragment;
    'getCollectionsLength()': FunctionFragment;
    'getUserAllowedNfts(address,address)': FunctionFragment;
    'isNftAllowed(address,uint256)': FunctionFragment;
    'nftReceiver()': FunctionFragment;
    'owner()': FunctionFragment;
    'redeem(address,uint256[])': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setCollectionAllowAll(address,bool)': FunctionFragment;
    'setCollectionIds(address,uint256[],bool[])': FunctionFragment;
    'setCollectionPriceAndToken(address,uint256,address)': FunctionFragment;
    'setNftReceiver(address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'withdrawTokens(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addCollection'
      | 'collectionIndexes'
      | 'collections'
      | 'getAllCollectionAddresses'
      | 'getAllowedCollectionIds'
      | 'getCollectionPriceAndToken'
      | 'getCollectionsLength'
      | 'getUserAllowedNfts'
      | 'isNftAllowed'
      | 'nftReceiver'
      | 'owner'
      | 'redeem'
      | 'renounceOwnership'
      | 'setCollectionAllowAll'
      | 'setCollectionIds'
      | 'setCollectionPriceAndToken'
      | 'setNftReceiver'
      | 'transferOwnership'
      | 'withdrawTokens'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'addCollection',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'collectionIndexes',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'collections',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'getAllCollectionAddresses', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getAllowedCollectionIds',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getCollectionPriceAndToken',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'getCollectionsLength', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getUserAllowedNfts',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'isNftAllowed',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'nftReceiver', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'redeem',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setCollectionAllowAll',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setCollectionIds',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[], PromiseOrValue<boolean>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'setCollectionPriceAndToken',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'setNftReceiver', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'withdrawTokens', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'addCollection', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collectionIndexes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collections', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAllCollectionAddresses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAllowedCollectionIds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCollectionPriceAndToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCollectionsLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserAllowedNfts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isNftAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nftReceiver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCollectionAllowAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCollectionIds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCollectionPriceAndToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setNftReceiver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawTokens', data: BytesLike): Result;

  events: {
    'CollectionAdded(address,address,uint256,uint256[])': EventFragment;
    'CollectionAllowAllChanged(address,bool)': EventFragment;
    'CollectionIdsSet(address,uint256[],bool[])': EventFragment;
    'CollectionPriceAndTokenChanged(address,uint256,address)': EventFragment;
    'NFTReceiverChanged(address,address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Redeemed(address,uint256,address)': EventFragment;
    'WithdrewTokens(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'CollectionAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollectionAllowAllChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollectionIdsSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollectionPriceAndTokenChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NFTReceiverChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Redeemed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrewTokens'): EventFragment;
}

export interface CollectionAddedEventObject {
  _collection: string;
  _token: string;
  _price: BigNumber;
  _ids: BigNumber[];
}
export type CollectionAddedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber[]],
  CollectionAddedEventObject
>;

export type CollectionAddedEventFilter = TypedEventFilter<CollectionAddedEvent>;

export interface CollectionAllowAllChangedEventObject {
  _collection: string;
  _allowAll: boolean;
}
export type CollectionAllowAllChangedEvent = TypedEvent<
  [string, boolean],
  CollectionAllowAllChangedEventObject
>;

export type CollectionAllowAllChangedEventFilter = TypedEventFilter<CollectionAllowAllChangedEvent>;

export interface CollectionIdsSetEventObject {
  _collection: string;
  _ids: BigNumber[];
  _allows: boolean[];
}
export type CollectionIdsSetEvent = TypedEvent<
  [string, BigNumber[], boolean[]],
  CollectionIdsSetEventObject
>;

export type CollectionIdsSetEventFilter = TypedEventFilter<CollectionIdsSetEvent>;

export interface CollectionPriceAndTokenChangedEventObject {
  _collection: string;
  _price: BigNumber;
  _token: string;
}
export type CollectionPriceAndTokenChangedEvent = TypedEvent<
  [string, BigNumber, string],
  CollectionPriceAndTokenChangedEventObject
>;

export type CollectionPriceAndTokenChangedEventFilter =
  TypedEventFilter<CollectionPriceAndTokenChangedEvent>;

export interface NFTReceiverChangedEventObject {
  _oldNftReceiver: string;
  _newNftReceiver: string;
}
export type NFTReceiverChangedEvent = TypedEvent<[string, string], NFTReceiverChangedEventObject>;

export type NFTReceiverChangedEventFilter = TypedEventFilter<NFTReceiverChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface RedeemedEventObject {
  _collection: string;
  _id: BigNumber;
  _user: string;
}
export type RedeemedEvent = TypedEvent<[string, BigNumber, string], RedeemedEventObject>;

export type RedeemedEventFilter = TypedEventFilter<RedeemedEvent>;

export interface WithdrewTokensEventObject {
  _token: string;
  amount: BigNumber;
}
export type WithdrewTokensEvent = TypedEvent<[string, BigNumber], WithdrewTokensEventObject>;

export type WithdrewTokensEventFilter = TypedEventFilter<WithdrewTokensEvent>;

export interface NFTBuyer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTBuyerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addCollection(
      _collection: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _allowAll: PromiseOrValue<boolean>,
      _token: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectionIndexes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collections(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean] & {
        collectionAddress: string;
        payoutToken: string;
        price: BigNumber;
        allowAll: boolean;
      }
    >;

    getAllCollectionAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { collections_: string[] }>;

    getAllowedCollectionIds(
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber[]] & { allIds_: boolean; ids_: BigNumber[] }>;

    getCollectionPriceAndToken(
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { token_: string; price_: BigNumber }>;

    getCollectionsLength(overrides?: CallOverrides): Promise<[BigNumber] & { length_: BigNumber }>;

    getUserAllowedNfts(
      _collection: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { ids_: BigNumber[] }>;

    isNftAllowed(
      _collection: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { allowed_: boolean }>;

    nftReceiver(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      _collection: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCollectionAllowAll(
      _collection: PromiseOrValue<string>,
      _allowAll: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCollectionIds(
      _collection: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _allows: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCollectionPriceAndToken(
      _collection: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNftReceiver(
      _nftReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawTokens(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addCollection(
    _collection: PromiseOrValue<string>,
    _ids: PromiseOrValue<BigNumberish>[],
    _allowAll: PromiseOrValue<boolean>,
    _token: PromiseOrValue<string>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectionIndexes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  collections(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, boolean] & {
      collectionAddress: string;
      payoutToken: string;
      price: BigNumber;
      allowAll: boolean;
    }
  >;

  getAllCollectionAddresses(overrides?: CallOverrides): Promise<string[]>;

  getAllowedCollectionIds(
    _collection: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber[]] & { allIds_: boolean; ids_: BigNumber[] }>;

  getCollectionPriceAndToken(
    _collection: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { token_: string; price_: BigNumber }>;

  getCollectionsLength(overrides?: CallOverrides): Promise<BigNumber>;

  getUserAllowedNfts(
    _collection: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  isNftAllowed(
    _collection: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nftReceiver(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  redeem(
    _collection: PromiseOrValue<string>,
    _ids: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCollectionAllowAll(
    _collection: PromiseOrValue<string>,
    _allowAll: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCollectionIds(
    _collection: PromiseOrValue<string>,
    _ids: PromiseOrValue<BigNumberish>[],
    _allows: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCollectionPriceAndToken(
    _collection: PromiseOrValue<string>,
    _price: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNftReceiver(
    _nftReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawTokens(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addCollection(
      _collection: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _allowAll: PromiseOrValue<boolean>,
      _token: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    collectionIndexes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    collections(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean] & {
        collectionAddress: string;
        payoutToken: string;
        price: BigNumber;
        allowAll: boolean;
      }
    >;

    getAllCollectionAddresses(overrides?: CallOverrides): Promise<string[]>;

    getAllowedCollectionIds(
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber[]] & { allIds_: boolean; ids_: BigNumber[] }>;

    getCollectionPriceAndToken(
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { token_: string; price_: BigNumber }>;

    getCollectionsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getUserAllowedNfts(
      _collection: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    isNftAllowed(
      _collection: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nftReceiver(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    redeem(
      _collection: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setCollectionAllowAll(
      _collection: PromiseOrValue<string>,
      _allowAll: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollectionIds(
      _collection: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _allows: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setCollectionPriceAndToken(
      _collection: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNftReceiver(_nftReceiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    withdrawTokens(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'CollectionAdded(address,address,uint256,uint256[])'(
      _collection?: PromiseOrValue<string> | null,
      _token?: null,
      _price?: null,
      _ids?: null
    ): CollectionAddedEventFilter;
    CollectionAdded(
      _collection?: PromiseOrValue<string> | null,
      _token?: null,
      _price?: null,
      _ids?: null
    ): CollectionAddedEventFilter;

    'CollectionAllowAllChanged(address,bool)'(
      _collection?: PromiseOrValue<string> | null,
      _allowAll?: null
    ): CollectionAllowAllChangedEventFilter;
    CollectionAllowAllChanged(
      _collection?: PromiseOrValue<string> | null,
      _allowAll?: null
    ): CollectionAllowAllChangedEventFilter;

    'CollectionIdsSet(address,uint256[],bool[])'(
      _collection?: PromiseOrValue<string> | null,
      _ids?: null,
      _allows?: null
    ): CollectionIdsSetEventFilter;
    CollectionIdsSet(
      _collection?: PromiseOrValue<string> | null,
      _ids?: null,
      _allows?: null
    ): CollectionIdsSetEventFilter;

    'CollectionPriceAndTokenChanged(address,uint256,address)'(
      _collection?: PromiseOrValue<string> | null,
      _price?: null,
      _token?: null
    ): CollectionPriceAndTokenChangedEventFilter;
    CollectionPriceAndTokenChanged(
      _collection?: PromiseOrValue<string> | null,
      _price?: null,
      _token?: null
    ): CollectionPriceAndTokenChangedEventFilter;

    'NFTReceiverChanged(address,address)'(
      _oldNftReceiver?: PromiseOrValue<string> | null,
      _newNftReceiver?: PromiseOrValue<string> | null
    ): NFTReceiverChangedEventFilter;
    NFTReceiverChanged(
      _oldNftReceiver?: PromiseOrValue<string> | null,
      _newNftReceiver?: PromiseOrValue<string> | null
    ): NFTReceiverChangedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    'Redeemed(address,uint256,address)'(
      _collection?: PromiseOrValue<string> | null,
      _id?: PromiseOrValue<BigNumberish> | null,
      _user?: PromiseOrValue<string> | null
    ): RedeemedEventFilter;
    Redeemed(
      _collection?: PromiseOrValue<string> | null,
      _id?: PromiseOrValue<BigNumberish> | null,
      _user?: PromiseOrValue<string> | null
    ): RedeemedEventFilter;

    'WithdrewTokens(address,uint256)'(
      _token?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrewTokensEventFilter;
    WithdrewTokens(
      _token?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrewTokensEventFilter;
  };

  estimateGas: {
    addCollection(
      _collection: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _allowAll: PromiseOrValue<boolean>,
      _token: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectionIndexes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    collections(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getAllCollectionAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    getAllowedCollectionIds(
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollectionPriceAndToken(
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollectionsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getUserAllowedNfts(
      _collection: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isNftAllowed(
      _collection: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      _collection: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCollectionAllowAll(
      _collection: PromiseOrValue<string>,
      _allowAll: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCollectionIds(
      _collection: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _allows: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCollectionPriceAndToken(
      _collection: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNftReceiver(
      _nftReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawTokens(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCollection(
      _collection: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _allowAll: PromiseOrValue<boolean>,
      _token: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectionIndexes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collections(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllCollectionAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllowedCollectionIds(
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollectionPriceAndToken(
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollectionsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserAllowedNfts(
      _collection: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNftAllowed(
      _collection: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      _collection: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCollectionAllowAll(
      _collection: PromiseOrValue<string>,
      _allowAll: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCollectionIds(
      _collection: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _allows: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCollectionPriceAndToken(
      _collection: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNftReceiver(
      _nftReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokens(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
