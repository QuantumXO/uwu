/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export declare namespace MultiFeeDistributionUNIV3POS {
  export type PositionConfigStruct = {
    token0: PromiseOrValue<string>;
    token1: PromiseOrValue<string>;
    fee: PromiseOrValue<BigNumberish>;
    tickLower: PromiseOrValue<BigNumberish>;
    tickUpper: PromiseOrValue<BigNumberish>;
  };

  export type PositionConfigStructOutput = [string, string, number, number, number] & {
    token0: string;
    token1: string;
    fee: number;
    tickLower: number;
    tickUpper: number;
  };

  export type LockedNFTStruct = {
    id: PromiseOrValue<BigNumberish>;
    liquidity: PromiseOrValue<BigNumberish>;
    unlockTime: PromiseOrValue<BigNumberish>;
  };

  export type LockedNFTStructOutput = [BigNumber, BigNumber, BigNumber] & {
    id: BigNumber;
    liquidity: BigNumber;
    unlockTime: BigNumber;
  };

  export type RewardDataStruct = {
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type RewardDataStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };

  export type LockedBalanceStruct = {
    amount: PromiseOrValue<BigNumberish>;
    unlockTime: PromiseOrValue<BigNumberish>;
  };

  export type LockedBalanceStructOutput = [BigNumber, BigNumber] & {
    amount: BigNumber;
    unlockTime: BigNumber;
  };
}

export interface MultiFeeDistributionUNIV3POSInterface extends utils.Interface {
  functions: {
    'accountAllNFTs(address)': FunctionFragment;
    'accountLiquidity(address)': FunctionFragment;
    'accountLockedNFTs(address)': FunctionFragment;
    'accountUnlockableNFTs(address)': FunctionFragment;
    'addReward(address)': FunctionFragment;
    'claimableRewards(address)': FunctionFragment;
    'delegateExit(address)': FunctionFragment;
    'earnedBalances(address)': FunctionFragment;
    'exit(address)': FunctionFragment;
    'exitDelegatee(address)': FunctionFragment;
    'getMinters()': FunctionFragment;
    'getReward(address[])': FunctionFragment;
    'incentivesController()': FunctionFragment;
    'lastTimeRewardApplicable(address)': FunctionFragment;
    'liquiditySupply()': FunctionFragment;
    'lock(uint256[])': FunctionFragment;
    'lockDuration()': FunctionFragment;
    'mint(address,uint256)': FunctionFragment;
    'nft()': FunctionFragment;
    'nfts(uint256)': FunctionFragment;
    'onERC721Received(address,address,uint256,bytes)': FunctionFragment;
    'owner()': FunctionFragment;
    'posConfig()': FunctionFragment;
    'publicExit()': FunctionFragment;
    'publicExitAreSet()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rewardData(address)': FunctionFragment;
    'rewardLookback()': FunctionFragment;
    'rewardToken()': FunctionFragment;
    'rewardTokenVault()': FunctionFragment;
    'rewardTokens(uint256)': FunctionFragment;
    'rewards(address,address)': FunctionFragment;
    'rewardsDuration()': FunctionFragment;
    'setIncentivesController(address)': FunctionFragment;
    'setMinters(address[])': FunctionFragment;
    'setPositionConfig((address,address,uint24,int24,int24))': FunctionFragment;
    'setTeamRewardFee(uint256)': FunctionFragment;
    'setTeamRewardVault(address)': FunctionFragment;
    'teamRewardFee()': FunctionFragment;
    'teamRewardVault()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'userRewardPerTokenPaid(address,address)': FunctionFragment;
    'vestingDuration()': FunctionFragment;
    'withdraw()': FunctionFragment;
    'withdrawExpiredLocks()': FunctionFragment;
    'withdrawableBalance(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'accountAllNFTs'
      | 'accountLiquidity'
      | 'accountLockedNFTs'
      | 'accountUnlockableNFTs'
      | 'addReward'
      | 'claimableRewards'
      | 'delegateExit'
      | 'earnedBalances'
      | 'exit'
      | 'exitDelegatee'
      | 'getMinters'
      | 'getReward'
      | 'incentivesController'
      | 'lastTimeRewardApplicable'
      | 'liquiditySupply'
      | 'lock'
      | 'lockDuration'
      | 'mint'
      | 'nft'
      | 'nfts'
      | 'onERC721Received'
      | 'owner'
      | 'posConfig'
      | 'publicExit'
      | 'publicExitAreSet'
      | 'renounceOwnership'
      | 'rewardData'
      | 'rewardLookback'
      | 'rewardToken'
      | 'rewardTokenVault'
      | 'rewardTokens'
      | 'rewards'
      | 'rewardsDuration'
      | 'setIncentivesController'
      | 'setMinters'
      | 'setPositionConfig'
      | 'setTeamRewardFee'
      | 'setTeamRewardVault'
      | 'teamRewardFee'
      | 'teamRewardVault'
      | 'transferOwnership'
      | 'userRewardPerTokenPaid'
      | 'vestingDuration'
      | 'withdraw'
      | 'withdrawExpiredLocks'
      | 'withdrawableBalance'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'accountAllNFTs', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'accountLiquidity',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'accountLockedNFTs',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'accountUnlockableNFTs',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'addReward', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'claimableRewards',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'delegateExit', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'earnedBalances', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'exit', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'exitDelegatee', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getMinters', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getReward', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: 'incentivesController', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'lastTimeRewardApplicable',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'liquiditySupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lock', values: [PromiseOrValue<BigNumberish>[]]): string;
  encodeFunctionData(functionFragment: 'lockDuration', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'mint',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'nft', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nfts', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'onERC721Received',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'posConfig', values?: undefined): string;
  encodeFunctionData(functionFragment: 'publicExit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'publicExitAreSet', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardData', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'rewardLookback', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardTokenVault', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'rewardTokens',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'rewards',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'rewardsDuration', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setIncentivesController',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'setMinters', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(
    functionFragment: 'setPositionConfig',
    values: [MultiFeeDistributionUNIV3POS.PositionConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'setTeamRewardFee',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setTeamRewardVault',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'teamRewardFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'teamRewardVault', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'userRewardPerTokenPaid',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'vestingDuration', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdraw', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawExpiredLocks', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'withdrawableBalance',
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: 'accountAllNFTs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accountLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accountLockedNFTs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accountUnlockableNFTs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimableRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegateExit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'earnedBalances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exitDelegatee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMinters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'incentivesController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastTimeRewardApplicable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquiditySupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nft', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nfts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onERC721Received', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'posConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'publicExit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'publicExitAreSet', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardLookback', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardTokenVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardsDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setIncentivesController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMinters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPositionConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTeamRewardFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTeamRewardVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'teamRewardFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'teamRewardVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userRewardPerTokenPaid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vestingDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawExpiredLocks', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawableBalance', data: BytesLike): Result;

  events: {
    'DelegateExitUpdated(address,address)': EventFragment;
    'Exit(address,uint256,uint256)': EventFragment;
    'IncentivesControllerUpdated(address)': EventFragment;
    'Locked(address,uint256)': EventFragment;
    'Mint(address,uint256)': EventFragment;
    'MintersUpdated(address[])': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'PositionConfigUpdated(address,address,uint24,int24,int24)': EventFragment;
    'PublicExit()': EventFragment;
    'RewardAdded(address)': EventFragment;
    'RewardPaid(address,address,uint256)': EventFragment;
    'TeamRewardFeeUpdated(uint256)': EventFragment;
    'TeamRewardVaultUpdated(address)': EventFragment;
    'Withdrawn(address,uint256)': EventFragment;
    'WithdrawnExpiredLocks(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'DelegateExitUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Exit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'IncentivesControllerUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Locked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Mint'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MintersUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PositionConfigUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PublicExit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardPaid'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TeamRewardFeeUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TeamRewardVaultUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawnExpiredLocks'): EventFragment;
}

export interface DelegateExitUpdatedEventObject {
  user: string;
  delegatee: string;
}
export type DelegateExitUpdatedEvent = TypedEvent<[string, string], DelegateExitUpdatedEventObject>;

export type DelegateExitUpdatedEventFilter = TypedEventFilter<DelegateExitUpdatedEvent>;

export interface ExitEventObject {
  user: string;
  amount: BigNumber;
  penaltyAmount: BigNumber;
}
export type ExitEvent = TypedEvent<[string, BigNumber, BigNumber], ExitEventObject>;

export type ExitEventFilter = TypedEventFilter<ExitEvent>;

export interface IncentivesControllerUpdatedEventObject {
  controller: string;
}
export type IncentivesControllerUpdatedEvent = TypedEvent<
  [string],
  IncentivesControllerUpdatedEventObject
>;

export type IncentivesControllerUpdatedEventFilter =
  TypedEventFilter<IncentivesControllerUpdatedEvent>;

export interface LockedEventObject {
  user: string;
  nftId: BigNumber;
}
export type LockedEvent = TypedEvent<[string, BigNumber], LockedEventObject>;

export type LockedEventFilter = TypedEventFilter<LockedEvent>;

export interface MintEventObject {
  user: string;
  amount: BigNumber;
}
export type MintEvent = TypedEvent<[string, BigNumber], MintEventObject>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface MintersUpdatedEventObject {
  minters: string[];
}
export type MintersUpdatedEvent = TypedEvent<[string[]], MintersUpdatedEventObject>;

export type MintersUpdatedEventFilter = TypedEventFilter<MintersUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PositionConfigUpdatedEventObject {
  token0: string;
  token1: string;
  fee: number;
  tickLower: number;
  tickUpper: number;
}
export type PositionConfigUpdatedEvent = TypedEvent<
  [string, string, number, number, number],
  PositionConfigUpdatedEventObject
>;

export type PositionConfigUpdatedEventFilter = TypedEventFilter<PositionConfigUpdatedEvent>;

export interface PublicExitEventObject {}
export type PublicExitEvent = TypedEvent<[], PublicExitEventObject>;

export type PublicExitEventFilter = TypedEventFilter<PublicExitEvent>;

export interface RewardAddedEventObject {
  token: string;
}
export type RewardAddedEvent = TypedEvent<[string], RewardAddedEventObject>;

export type RewardAddedEventFilter = TypedEventFilter<RewardAddedEvent>;

export interface RewardPaidEventObject {
  user: string;
  rewardsToken: string;
  reward: BigNumber;
}
export type RewardPaidEvent = TypedEvent<[string, string, BigNumber], RewardPaidEventObject>;

export type RewardPaidEventFilter = TypedEventFilter<RewardPaidEvent>;

export interface TeamRewardFeeUpdatedEventObject {
  fee: BigNumber;
}
export type TeamRewardFeeUpdatedEvent = TypedEvent<[BigNumber], TeamRewardFeeUpdatedEventObject>;

export type TeamRewardFeeUpdatedEventFilter = TypedEventFilter<TeamRewardFeeUpdatedEvent>;

export interface TeamRewardVaultUpdatedEventObject {
  vault: string;
}
export type TeamRewardVaultUpdatedEvent = TypedEvent<[string], TeamRewardVaultUpdatedEventObject>;

export type TeamRewardVaultUpdatedEventFilter = TypedEventFilter<TeamRewardVaultUpdatedEvent>;

export interface WithdrawnEventObject {
  user: string;
  nftId: BigNumber;
}
export type WithdrawnEvent = TypedEvent<[string, BigNumber], WithdrawnEventObject>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface WithdrawnExpiredLocksEventObject {
  user: string;
  nftId: BigNumber;
}
export type WithdrawnExpiredLocksEvent = TypedEvent<
  [string, BigNumber],
  WithdrawnExpiredLocksEventObject
>;

export type WithdrawnExpiredLocksEventFilter = TypedEventFilter<WithdrawnExpiredLocksEvent>;

export interface MultiFeeDistributionUNIV3POS extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MultiFeeDistributionUNIV3POSInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountAllNFTs(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [MultiFeeDistributionUNIV3POS.LockedNFTStructOutput[]] & {
        allData: MultiFeeDistributionUNIV3POS.LockedNFTStructOutput[];
      }
    >;

    accountLiquidity(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        total: BigNumber;
        locked: BigNumber;
        unlockable: BigNumber;
      }
    >;

    accountLockedNFTs(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [MultiFeeDistributionUNIV3POS.LockedNFTStructOutput[]] & {
        lockedData: MultiFeeDistributionUNIV3POS.LockedNFTStructOutput[];
      }
    >;

    accountUnlockableNFTs(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [MultiFeeDistributionUNIV3POS.LockedNFTStructOutput[]] & {
        unlockableData: MultiFeeDistributionUNIV3POS.LockedNFTStructOutput[];
      }
    >;

    addReward(
      _rewardsToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimableRewards(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [MultiFeeDistributionUNIV3POS.RewardDataStructOutput[]] & {
        rewardDatas: MultiFeeDistributionUNIV3POS.RewardDataStructOutput[];
      }
    >;

    delegateExit(
      delegatee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    earnedBalances(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, MultiFeeDistributionUNIV3POS.LockedBalanceStructOutput[]] & {
        total: BigNumber;
        earningsData: MultiFeeDistributionUNIV3POS.LockedBalanceStructOutput[];
      }
    >;

    exit(
      onBehalfOf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exitDelegatee(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    getMinters(overrides?: CallOverrides): Promise<[string[]]>;

    getReward(
      _rewardTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    incentivesController(overrides?: CallOverrides): Promise<[string]>;

    lastTimeRewardApplicable(
      _rewardsToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquiditySupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    lock(
      nftIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lockDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nft(overrides?: CallOverrides): Promise<[string]>;

    nfts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        owner: string;
        liquidity: BigNumber;
        unlockTime: BigNumber;
      }
    >;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    posConfig(overrides?: CallOverrides): Promise<
      [string, string, number, number, number] & {
        token0: string;
        token1: string;
        fee: number;
        tickLower: number;
        tickUpper: number;
      }
    >;

    publicExit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    publicExitAreSet(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardData(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        periodFinish: BigNumber;
        rewardRate: BigNumber;
        lastUpdateTime: BigNumber;
        rewardPerTokenStored: BigNumber;
        balance: BigNumber;
      }
    >;

    rewardLookback(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    rewardTokenVault(overrides?: CallOverrides): Promise<[string]>;

    rewardTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    rewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardsDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    setIncentivesController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinters(
      _minters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPositionConfig(
      _posConfig: MultiFeeDistributionUNIV3POS.PositionConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTeamRewardFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTeamRewardVault(
      vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    teamRewardFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    teamRewardVault(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userRewardPerTokenPaid(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vestingDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawExpiredLocks(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawableBalance(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        penaltyAmount: BigNumber;
        amountWithoutPenalty: BigNumber;
      }
    >;
  };

  accountAllNFTs(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<MultiFeeDistributionUNIV3POS.LockedNFTStructOutput[]>;

  accountLiquidity(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      total: BigNumber;
      locked: BigNumber;
      unlockable: BigNumber;
    }
  >;

  accountLockedNFTs(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<MultiFeeDistributionUNIV3POS.LockedNFTStructOutput[]>;

  accountUnlockableNFTs(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<MultiFeeDistributionUNIV3POS.LockedNFTStructOutput[]>;

  addReward(
    _rewardsToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimableRewards(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<MultiFeeDistributionUNIV3POS.RewardDataStructOutput[]>;

  delegateExit(
    delegatee: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  earnedBalances(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, MultiFeeDistributionUNIV3POS.LockedBalanceStructOutput[]] & {
      total: BigNumber;
      earningsData: MultiFeeDistributionUNIV3POS.LockedBalanceStructOutput[];
    }
  >;

  exit(
    onBehalfOf: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exitDelegatee(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  getMinters(overrides?: CallOverrides): Promise<string[]>;

  getReward(
    _rewardTokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  incentivesController(overrides?: CallOverrides): Promise<string>;

  lastTimeRewardApplicable(
    _rewardsToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquiditySupply(overrides?: CallOverrides): Promise<BigNumber>;

  lock(
    nftIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    user: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nft(overrides?: CallOverrides): Promise<string>;

  nfts(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      owner: string;
      liquidity: BigNumber;
      unlockTime: BigNumber;
    }
  >;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  posConfig(overrides?: CallOverrides): Promise<
    [string, string, number, number, number] & {
      token0: string;
      token1: string;
      fee: number;
      tickLower: number;
      tickUpper: number;
    }
  >;

  publicExit(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  publicExitAreSet(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardData(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      periodFinish: BigNumber;
      rewardRate: BigNumber;
      lastUpdateTime: BigNumber;
      rewardPerTokenStored: BigNumber;
      balance: BigNumber;
    }
  >;

  rewardLookback(overrides?: CallOverrides): Promise<BigNumber>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  rewardTokenVault(overrides?: CallOverrides): Promise<string>;

  rewardTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  rewards(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

  setIncentivesController(
    _controller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinters(
    _minters: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPositionConfig(
    _posConfig: MultiFeeDistributionUNIV3POS.PositionConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTeamRewardFee(
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTeamRewardVault(
    vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  teamRewardFee(overrides?: CallOverrides): Promise<BigNumber>;

  teamRewardVault(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userRewardPerTokenPaid(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vestingDuration(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  withdrawExpiredLocks(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawableBalance(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      penaltyAmount: BigNumber;
      amountWithoutPenalty: BigNumber;
    }
  >;

  callStatic: {
    accountAllNFTs(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<MultiFeeDistributionUNIV3POS.LockedNFTStructOutput[]>;

    accountLiquidity(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        total: BigNumber;
        locked: BigNumber;
        unlockable: BigNumber;
      }
    >;

    accountLockedNFTs(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<MultiFeeDistributionUNIV3POS.LockedNFTStructOutput[]>;

    accountUnlockableNFTs(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<MultiFeeDistributionUNIV3POS.LockedNFTStructOutput[]>;

    addReward(_rewardsToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    claimableRewards(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<MultiFeeDistributionUNIV3POS.RewardDataStructOutput[]>;

    delegateExit(delegatee: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    earnedBalances(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, MultiFeeDistributionUNIV3POS.LockedBalanceStructOutput[]] & {
        total: BigNumber;
        earningsData: MultiFeeDistributionUNIV3POS.LockedBalanceStructOutput[];
      }
    >;

    exit(onBehalfOf: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    exitDelegatee(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    getMinters(overrides?: CallOverrides): Promise<string[]>;

    getReward(_rewardTokens: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;

    incentivesController(overrides?: CallOverrides): Promise<string>;

    lastTimeRewardApplicable(
      _rewardsToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquiditySupply(overrides?: CallOverrides): Promise<BigNumber>;

    lock(nftIds: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;

    lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    nft(overrides?: CallOverrides): Promise<string>;

    nfts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        owner: string;
        liquidity: BigNumber;
        unlockTime: BigNumber;
      }
    >;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    posConfig(overrides?: CallOverrides): Promise<
      [string, string, number, number, number] & {
        token0: string;
        token1: string;
        fee: number;
        tickLower: number;
        tickUpper: number;
      }
    >;

    publicExit(overrides?: CallOverrides): Promise<void>;

    publicExitAreSet(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardData(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        periodFinish: BigNumber;
        rewardRate: BigNumber;
        lastUpdateTime: BigNumber;
        rewardPerTokenStored: BigNumber;
        balance: BigNumber;
      }
    >;

    rewardLookback(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    rewardTokenVault(overrides?: CallOverrides): Promise<string>;

    rewardTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    rewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    setIncentivesController(
      _controller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinters(_minters: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;

    setPositionConfig(
      _posConfig: MultiFeeDistributionUNIV3POS.PositionConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setTeamRewardFee(fee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setTeamRewardVault(vault: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    teamRewardFee(overrides?: CallOverrides): Promise<BigNumber>;

    teamRewardVault(overrides?: CallOverrides): Promise<string>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    userRewardPerTokenPaid(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vestingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    withdrawExpiredLocks(overrides?: CallOverrides): Promise<void>;

    withdrawableBalance(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        penaltyAmount: BigNumber;
        amountWithoutPenalty: BigNumber;
      }
    >;
  };

  filters: {
    'DelegateExitUpdated(address,address)'(
      user?: PromiseOrValue<string> | null,
      delegatee?: PromiseOrValue<string> | null
    ): DelegateExitUpdatedEventFilter;
    DelegateExitUpdated(
      user?: PromiseOrValue<string> | null,
      delegatee?: PromiseOrValue<string> | null
    ): DelegateExitUpdatedEventFilter;

    'Exit(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      penaltyAmount?: null
    ): ExitEventFilter;
    Exit(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      penaltyAmount?: null
    ): ExitEventFilter;

    'IncentivesControllerUpdated(address)'(
      controller?: PromiseOrValue<string> | null
    ): IncentivesControllerUpdatedEventFilter;
    IncentivesControllerUpdated(
      controller?: PromiseOrValue<string> | null
    ): IncentivesControllerUpdatedEventFilter;

    'Locked(address,uint256)'(
      user?: PromiseOrValue<string> | null,
      nftId?: PromiseOrValue<BigNumberish> | null
    ): LockedEventFilter;
    Locked(
      user?: PromiseOrValue<string> | null,
      nftId?: PromiseOrValue<BigNumberish> | null
    ): LockedEventFilter;

    'Mint(address,uint256)'(user?: PromiseOrValue<string> | null, amount?: null): MintEventFilter;
    Mint(user?: PromiseOrValue<string> | null, amount?: null): MintEventFilter;

    'MintersUpdated(address[])'(minters?: null): MintersUpdatedEventFilter;
    MintersUpdated(minters?: null): MintersUpdatedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    'PositionConfigUpdated(address,address,uint24,int24,int24)'(
      token0?: PromiseOrValue<string> | null,
      token1?: PromiseOrValue<string> | null,
      fee?: null,
      tickLower?: null,
      tickUpper?: null
    ): PositionConfigUpdatedEventFilter;
    PositionConfigUpdated(
      token0?: PromiseOrValue<string> | null,
      token1?: PromiseOrValue<string> | null,
      fee?: null,
      tickLower?: null,
      tickUpper?: null
    ): PositionConfigUpdatedEventFilter;

    'PublicExit()'(): PublicExitEventFilter;
    PublicExit(): PublicExitEventFilter;

    'RewardAdded(address)'(token?: PromiseOrValue<string> | null): RewardAddedEventFilter;
    RewardAdded(token?: PromiseOrValue<string> | null): RewardAddedEventFilter;

    'RewardPaid(address,address,uint256)'(
      user?: PromiseOrValue<string> | null,
      rewardsToken?: PromiseOrValue<string> | null,
      reward?: null
    ): RewardPaidEventFilter;
    RewardPaid(
      user?: PromiseOrValue<string> | null,
      rewardsToken?: PromiseOrValue<string> | null,
      reward?: null
    ): RewardPaidEventFilter;

    'TeamRewardFeeUpdated(uint256)'(fee?: null): TeamRewardFeeUpdatedEventFilter;
    TeamRewardFeeUpdated(fee?: null): TeamRewardFeeUpdatedEventFilter;

    'TeamRewardVaultUpdated(address)'(
      vault?: PromiseOrValue<string> | null
    ): TeamRewardVaultUpdatedEventFilter;
    TeamRewardVaultUpdated(
      vault?: PromiseOrValue<string> | null
    ): TeamRewardVaultUpdatedEventFilter;

    'Withdrawn(address,uint256)'(
      user?: PromiseOrValue<string> | null,
      nftId?: PromiseOrValue<BigNumberish> | null
    ): WithdrawnEventFilter;
    Withdrawn(
      user?: PromiseOrValue<string> | null,
      nftId?: PromiseOrValue<BigNumberish> | null
    ): WithdrawnEventFilter;

    'WithdrawnExpiredLocks(address,uint256)'(
      user?: PromiseOrValue<string> | null,
      nftId?: PromiseOrValue<BigNumberish> | null
    ): WithdrawnExpiredLocksEventFilter;
    WithdrawnExpiredLocks(
      user?: PromiseOrValue<string> | null,
      nftId?: PromiseOrValue<BigNumberish> | null
    ): WithdrawnExpiredLocksEventFilter;
  };

  estimateGas: {
    accountAllNFTs(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    accountLiquidity(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accountLockedNFTs(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accountUnlockableNFTs(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addReward(
      _rewardsToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimableRewards(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegateExit(
      delegatee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    earnedBalances(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    exit(
      onBehalfOf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exitDelegatee(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getMinters(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(
      _rewardTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    incentivesController(overrides?: CallOverrides): Promise<BigNumber>;

    lastTimeRewardApplicable(
      _rewardsToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquiditySupply(overrides?: CallOverrides): Promise<BigNumber>;

    lock(
      nftIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nft(overrides?: CallOverrides): Promise<BigNumber>;

    nfts(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    posConfig(overrides?: CallOverrides): Promise<BigNumber>;

    publicExit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    publicExitAreSet(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardData(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    rewardLookback(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokenVault(overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    rewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    setIncentivesController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinters(
      _minters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPositionConfig(
      _posConfig: MultiFeeDistributionUNIV3POS.PositionConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTeamRewardFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTeamRewardVault(
      vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    teamRewardFee(overrides?: CallOverrides): Promise<BigNumber>;

    teamRewardVault(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userRewardPerTokenPaid(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vestingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    withdrawExpiredLocks(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawableBalance(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountAllNFTs(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accountLiquidity(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accountLockedNFTs(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accountUnlockableNFTs(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addReward(
      _rewardsToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimableRewards(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegateExit(
      delegatee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    earnedBalances(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exit(
      onBehalfOf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exitDelegatee(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReward(
      _rewardTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    incentivesController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastTimeRewardApplicable(
      _rewardsToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquiditySupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lock(
      nftIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lockDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nfts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    posConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicExit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    publicExitAreSet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardData(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardLookback(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardTokenVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setIncentivesController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinters(
      _minters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPositionConfig(
      _posConfig: MultiFeeDistributionUNIV3POS.PositionConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTeamRewardFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTeamRewardVault(
      vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    teamRewardFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    teamRewardVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userRewardPerTokenPaid(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vestingDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawExpiredLocks(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawableBalance(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
