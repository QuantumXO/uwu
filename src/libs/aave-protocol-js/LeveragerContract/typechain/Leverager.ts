/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export declare namespace DataTypes {
  export type ReserveConfigurationMapStruct = {
    data: PromiseOrValue<BigNumberish>;
  };

  export type ReserveConfigurationMapStructOutput = [BigNumber] & {
    data: BigNumber;
  };
}

export interface LeveragerInterface extends utils.Interface {
  functions: {
    'BORROW_RATIO_DECIMALS()': FunctionFragment;
    'getConfiguration(address)': FunctionFragment;
    'getVDebtToken(address)': FunctionFragment;
    'lendingPool()': FunctionFragment;
    'loop(address,uint256,uint256,uint256,uint256)': FunctionFragment;
    'ltv(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BORROW_RATIO_DECIMALS'
      | 'getConfiguration'
      | 'getVDebtToken'
      | 'lendingPool'
      | 'loop'
      | 'ltv'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BORROW_RATIO_DECIMALS', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getConfiguration',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'getVDebtToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'lendingPool', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'loop',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: 'ltv', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'BORROW_RATIO_DECIMALS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getConfiguration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVDebtToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lendingPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'loop', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ltv', data: BytesLike): Result;

  events: {};
}

export interface Leverager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LeveragerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BORROW_RATIO_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    getConfiguration(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.ReserveConfigurationMapStructOutput]>;

    getVDebtToken(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    lendingPool(overrides?: CallOverrides): Promise<[string]>;

    loop(
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      interestRateMode: PromiseOrValue<BigNumberish>,
      borrowRatio: PromiseOrValue<BigNumberish>,
      loopCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ltv(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  BORROW_RATIO_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  getConfiguration(
    asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<DataTypes.ReserveConfigurationMapStructOutput>;

  getVDebtToken(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  lendingPool(overrides?: CallOverrides): Promise<string>;

  loop(
    asset: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    interestRateMode: PromiseOrValue<BigNumberish>,
    borrowRatio: PromiseOrValue<BigNumberish>,
    loopCount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ltv(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    BORROW_RATIO_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    getConfiguration(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<DataTypes.ReserveConfigurationMapStructOutput>;

    getVDebtToken(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    lendingPool(overrides?: CallOverrides): Promise<string>;

    loop(
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      interestRateMode: PromiseOrValue<BigNumberish>,
      borrowRatio: PromiseOrValue<BigNumberish>,
      loopCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    ltv(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    BORROW_RATIO_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    getConfiguration(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getVDebtToken(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lendingPool(overrides?: CallOverrides): Promise<BigNumber>;

    loop(
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      interestRateMode: PromiseOrValue<BigNumberish>,
      borrowRatio: PromiseOrValue<BigNumberish>,
      loopCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ltv(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BORROW_RATIO_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getConfiguration(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVDebtToken(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lendingPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loop(
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      interestRateMode: PromiseOrValue<BigNumberish>,
      borrowRatio: PromiseOrValue<BigNumberish>,
      loopCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ltv(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
