/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export declare namespace Helper {
  export type MarketItemStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    ownerOf: PromiseOrValue<string>;
    approved: PromiseOrValue<string>;
    uri: PromiseOrValue<string>;
  };

  export type MarketItemStructOutput = [BigNumber, string, string, string] & {
    tokenId: BigNumber;
    ownerOf: string;
    approved: string;
    uri: string;
  };
}

export interface HelperInterface extends utils.Interface {
  functions: {
    'fetchAllNft()': FunctionFragment;
    'fetchMyNft()': FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: 'fetchAllNft' | 'fetchMyNft'): FunctionFragment;

  encodeFunctionData(functionFragment: 'fetchAllNft', values?: undefined): string;
  encodeFunctionData(functionFragment: 'fetchMyNft', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'fetchAllNft', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fetchMyNft', data: BytesLike): Result;

  events: {};
}

export interface Helper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fetchAllNft(overrides?: CallOverrides): Promise<[Helper.MarketItemStructOutput[]]>;

    fetchMyNft(overrides?: CallOverrides): Promise<[Helper.MarketItemStructOutput[]]>;
  };

  fetchAllNft(overrides?: CallOverrides): Promise<Helper.MarketItemStructOutput[]>;

  fetchMyNft(overrides?: CallOverrides): Promise<Helper.MarketItemStructOutput[]>;

  callStatic: {
    fetchAllNft(overrides?: CallOverrides): Promise<Helper.MarketItemStructOutput[]>;

    fetchMyNft(overrides?: CallOverrides): Promise<Helper.MarketItemStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    fetchAllNft(overrides?: CallOverrides): Promise<BigNumber>;

    fetchMyNft(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    fetchAllNft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fetchMyNft(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
